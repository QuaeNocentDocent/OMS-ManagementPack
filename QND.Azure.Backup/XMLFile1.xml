<?xml version="1.0" encoding="utf-8"?>
<DataSourceModuleType ID="Progel.AX.4.Service.Discovery.DS" Accessibility="Internal" Batching="false">
  <Configuration>
    <xsd:element name="TraceLevel" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="TargetComputer" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="AutoOnly" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="ScriptTimeout" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
  </Configuration>
  <OverrideableParameters>
    <OverrideableParameter ID="TraceLevel" Selector="$Config/TraceLevel$" ParameterType="int" />
    <OverrideableParameter ID="AutoOnly" Selector="$Config/AutoOnly$" ParameterType="string" />
    <OverrideableParameter ID="ScriptTimeout" Selector="$Config/ScriptTimeout$" ParameterType="int" />
    <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
    <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
  </OverrideableParameters>
  <ModuleImplementation>
    <Composite>
      <MemberModules>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.DiscoveryProvider">
          <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
          <SyncTime>$Config/SyncTime$</SyncTime>
          <ScriptName>Progel.AXSvcDisco.vbs</ScriptName>
          <Arguments>$Config/TraceLevel$ $MPElement$ $Target/Id$ $Config/TargetComputer$ $Config/AutoOnly$</Arguments>
          <ScriptBody>
            <![CDATA['*************************************************************************
' Script Name - 
' Author	  -  - Progel srl
' Version	  - 1.0 20.11.2012
'
' Purpose     - 
'               
' Assumptions - 
'				
'               
' Parameters  - TraceLevel
'             - 
' If discovery the following parameters must be added 
'				SourceId ($MPElement$ )
'				ManagedEntityId ($Target/Id$)
'
' Output properties
'
' Status
'
' Version History
'	  1.0 20.11.2012 DG First Release
'
' (c) Copyright 2012, Progel srl, All Rights Reserved
' Proprietary and confidential to Progel srl              
'
'*************************************************************************
  
Option Explicit
SetLocale ("en-us")

'TODO -- Insert Script Version and Args Count the first arg is always the trace level
Const SCRIPT_VERSION = "1.2"
Const SCRIPT_ARGS = 5
'----------------------------------------------
'Debugging info
' ************** WARNING remove the extra space after the $ symbol, leaving in place this section can broke cookdown!
' MPElement: $_MPElement$ 
' MPElement/Name: $_MPElement/Name$
'
' System.Entity: $_MPElement[Name="System!System.Entity"]$
' DisplayName: $_MPElement[Name="System!System.Entity"]/DisplayName$
'
' Target Id: $_Target/Id$
' Target DisplayName: $_Target/Property[Type="System!System.Entity"]/DisplayName$
'----------------------------------------------
'

'Trace Level Costants
Const TRACE_NONE 	= 0
COnst TRACE_ERROR 	= 1
COnst TRACE_WARNING = 2
Const TRACE_INFO 	= 3
Const TRACE_VERBOSE = 4

'Event Type Constants
Const EVENT_TYPE_SUCCESS      = 0
Const EVENT_TYPE_ERROR        = 1
Const EVENT_TYPE_WARNING      = 2
Const EVENT_TYPE_INFORMATION  = 4
Const EVENT_TYPE_AUDITSUCCESS = 8
Const EVENT_TYPE_AUDITFAILURE = 16

' Standard Event IDs
Const FAILURE_EVENT_ID = 4000		'errore generico nello script
Const SUCCESS_EVENT_ID = 701
Const START_EVENT_ID = 702
Const STOP_EVENT_ID = 703
Const INFO_EVENT_ID = 704

' TypedPropertyBag
const AlertDataType = 0
const EventDataType	= 2
const PerformanceDataType = 2
const StateDataType       = 3

Const HKEY_CLASSES_ROOT   = &H80000000
Const HKEY_CURRENT_USER   = &H80000001
Const HKEY_LOCAL_MACHINE  = &H80000002
Const HKEY_USERS          = &H80000003

CONST wbemFlagForwardOnly = &H20
CONST wbemFlagReturnWhenComplete = &H00


'Globals
Dim g_API, g_oXML
Dim g_StdErr
Dim g_RegistryStatePath 'Used to store script related state in registry

Dim P_TraceLevel

'Debug Only
'Const REGPATH = "Software\Test\CurrentControlSet\Services\Dynamics Server\4.0"
Const REGPATH = "System\CurrentControlSet\Services\Dynamics Server\4.0"

On Error Resume Next

Dim dtStart, oArgs

  	dtStart = Now

	Globals

	Set oArgs = WScript.Arguments
	LogParams
  if oArgs.Count <> SCRIPT_ARGS Then
		Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_ERROR,"called without proper arguments and was not executed.", TRACE_ERROR)
		Wscript.Quit -1
	End If
	P_TraceLevel = CInt(oArgs(0))



Dim SourceID, ManagedEntityId, TargetComputer, autoOnly

SourceId = oArgs(1)
ManagedEntityId = oArgs(2)
TargetComputer = oArgs(3)
autoOnly = CBool(oArgs(4))

Dim oreg, aSubKeys, subKey, oRegExp, oWmi

Set oRegExp = new RegExp
oRegExp.IgnoreCase = true
oRegExp.Pattern="^[0-9][0-9]$"

Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & TargetComputer & "\root\default:StdRegProv")
Set oWmi = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & TargetComputer & "\root\cimv2")

If Err.Number <> 0 Then
		Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_ERROR,ErrorMsg(Err,"error accessing WMI."), TRACE_ERROR)
        Call ThrowKeepDiscoveryInfo(SourceId, ManagedEntityId)
        WScript.Quit(0)
end if

Dim oDiscoveryData, serviceName, value, dbServer, database, port, resultSet, service, serviceProcessName, serviceDisplayName, serviceDescription
Dim svcQuery, debugServiceName

svcQuery = "Select * from win32_service where name='"
set oDiscoveryData = g_API.CreateDiscoveryData(0, SourceId, ManagedEntityId)
' Enum the subkeys of the key path we've chosen
oReg.EnumKey HKEY_LOCAL_MACHINE, REGPATH, aSubKeys

for each subKey in aSubKeys
    'check for subkey compliance
    If TRUE=oRegExp.Test(subKey) Then
        serviceName = "AOS$" & subKey
        'for debug purposes only
        value = ""
        oReg.GetStringValue HKEY_LOCAL_MACHINE, REGPATH & "\" & subKey, "DebugServiceName", value
        If value <> "" and Err.Number = 0 Then
            serviceName = value   
        else          
            Err.Clear
        end if
        'stop debug
   		Call LogEvent(INFO_EVENT_ID,EVENT_TYPE_INFORMATION,ErrorMsg(Err,"Processing service: " & serviceName), TRACE_VERBOSE)
        
        oReg.GetStringValue HKEY_LOCAL_MACHINE, REGPATH & "\" & subKey, "Current", value
        If Err.Number = 0 Then
            oReg.GetStringValue HKEY_LOCAL_MACHINE, REGPATH & "\" & subKey & "\" & value, "dbserver", dbServer
            oReg.GetStringValue HKEY_LOCAL_MACHINE, REGPATH & "\" & subKey & "\" & value, "database", database
            oReg.GetStringValue HKEY_LOCAL_MACHINE, REGPATH & "\" & subKey & "\" & value, "port", port
            'now get the basic service info needed for discovery
            if err.number = 0 and Len(serviceName) >= 6 Then 'should be = 6 but for debug puposes let's make it looser
                ServiceProcessName=""
                ServiceDisplayName=""
                ServiceDescription=""
                Set resultSet = oWmi.ExecQuery(svcQuery & serviceName & "'", "WQL", wbemFlagForwardOnly + wbemFlagReturnWhenComplete)
                for each service in resultSet
                    if true=autoOnly Then
                        if UCASE(service.StartMode) = "AUTO" Then
                            ServiceProcessName = service.PathName
                            ServiceDisplayName = service.DisplayName
                            ServiceDescription = service.Description
                            exit for
                        end if
                    else
                            ServiceProcessName = service.PathName
                            ServiceDisplayName = service.DisplayName
                            ServiceDescription = service.Description
                            exit for
                    end if
                next
   		        Call LogEvent(INFO_EVENT_ID,EVENT_TYPE_INFORMATION,ErrorMsg(Err,"dbServer: " & dbServer & vbCrLf _ 
                    & "database: " & database & vbCrLf & "port: " & port & vbCrLf & "Service Process Name: " & ServiceProcessName) _ 
                    , TRACE_VERBOSE)
                'now if we don't have any error and if the key properties are all set we can add a discovery instance
                If err.number = 0 and _
                    dbServer <> "" and _ 
                    database <> "" and _
                    port <> "" and _ 
                    ServiceProcessName <> "" Then
                    Call CreateDiscoveryInstance(TargetComputer, serviceName, serviceProcessname, serviceDisplayName, ServiceDescription, dbServer, database, port)
                else
               		Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_WARNING,ErrorMsg(Err,"Incomplete data or error for service: " & serviceName), TRACE_WARNING)
                    Err.Clear
                end if
            else
               	Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_WARNING,ErrorMsg(Err,"Error getting data for service: " & serviceName), TRACE_WARNING)
                Err.Clear
            end if
        else
            Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_WARNING,ErrorMsg(Err,"Error resding registry key " & REGPATH & "\" & subKey), TRACE_WARNING)
            Err.Clear
        end if
    end if
next

If Err.Number <> 0 Then 'Generic catch all 
	Call LogEvent(FAILURE_EVENT_ID,EVENT_TYPE_ERROR,ErrorMsg(Err,"Generic error trapped"), TRACE_ERROR)
    Call ThrowKeepDiscoveryInfo(SourceId, ManagedEntityId)
    WScript.Quit(0)
end if

'if evrything is ok just return the disocvred data
Call g_API.Return(oDiscoveryData) 

	Call LogEvent(STOP_EVENT_ID,EVENT_TYPE_SUCCESS, "has completed successfully in " & DateDiff("s", dtStart, Now) & " seconds.", TRACE_INFO)
	
	ClearGlobals


Function CreateDiscoveryInstance(TargetComputerId,serviceName, serviceProcessname, serviceDisplayName, ServiceDescription, dbServer, database, port)
Dim oInst, oRoleInst, oRel, groupInst, dApp
		set oInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='Progel.AX.4.Service']$")
		call oInst.AddProperty("$MPElement[Name='Progel.AX.4.Service']/DBServer$", dbServer)
		call oInst.AddProperty("$MPElement[Name='Progel.AX.4.Service']/Database$", database)
		call oInst.AddProperty("$MPElement[Name='Progel.AX.4.Service']/Port$", port)
		'inherited and rels
		call oInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", TargetComputerId)
		call oInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", serviceDisplayName)	
		call oInst.AddProperty("$MPElement[Name='NTServiceLibrary!Microsoft.SystemCenter.NTService']/ServiceName$", serviceName)
		call oInst.AddProperty("$MPElement[Name='NTServiceLibrary!Microsoft.SystemCenter.NTService']/ServiceProcessName$", ServiceProcessName)
		call oInst.AddProperty("$MPElement[Name='NTServiceLibrary!Microsoft.SystemCenter.NTService']/DisplayName$", serviceDisplayName)
		call oInst.AddProperty("$MPElement[Name='NTServiceLibrary!Microsoft.SystemCenter.NTService']/Description$", ServiceDescription)
		call oDiscoveryData.AddInstance(oInst)
        Set oRoleInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='Progel.AX.4.Role']$")
        call oRoleInst.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", TargetComputerId)
		call oDiscoveryData.AddInstance(oRoleInst)
        Set oRel = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='Progel.AX.4.RoleContainsService']$")
        oRel.Source = oRoleInst
        oRel.Target = oInst
        Call oDiscoveryData.AddInstance(oRel)

        'Component Groups + memebrship
        set groupInst = oDiscoveryData.CreateClassInstance("$MPElement[Name='Progel.AX.4.Tier.Services.Group']$")
		call groupInst.AddProperty("$MPElement[Name='Progel.AX.4.Tier.Services.Group']/DBServer$", dbServer)
		call groupInst.AddProperty("$MPElement[Name='Progel.AX.4.Tier.Services.Group']/Database$", database)
		call groupInst.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "AX4 - Services for " & database & " (" & dbServer & ")")	
		call oDiscoveryData.AddInstance(groupInst)

        Set oRel = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='Progel.AX.4.TierServiceGroupContainsService']$")
        oRel.Source = groupInst
        oRel.Target = oInst
        Call oDiscoveryData.AddInstance(oRel)

        'Distributed App + Membership
        set dApp = oDiscoveryData.CreateClassInstance("$MPElement[Name='Progel.AX.4.DistributedService']$")
		call dApp.AddProperty("$MPElement[Name='Progel.AX.4.DistributedService']/DBServer$", dbServer)
		call dApp.AddProperty("$MPElement[Name='Progel.AX.4.DistributedService']/Database$", database)
		call dApp.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "AX4 - " & database & " (" & dbServer & ")")	
		call oDiscoveryData.AddInstance(dApp)

        Set oRel = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='Progel.AX.4.DServiceContainsTServiceGroup']$")
        oRel.Source = dApp
        oRel.Target = groupInst
        Call oDiscoveryData.AddInstance(oRel)

        'Tier data group empty connected to distributed app
        Dim instance, i, dbGroup, sqlServer
        If Instr(dbServer,"\") = 0 Then
            instance = "MSSQLSERVER"
            sqlServer = dbServer
        else
            instance = Mid(dbServer, InStr(dbServer, "\")+1)
            sqlServer = Replace(dbServer, "\" & instance, "")
        end if
        set dbGroup = oDiscoveryData.CreateClassInstance("$MPElement[Name='Progel.AX.4.Tier.Databases.Group']$")
		call dbGroup.AddProperty("$MPElement[Name='Progel.AX.4.Tier.Databases.Group']/DBServer$", sqlServer)
		call dbGroup.AddProperty("$MPElement[Name='Progel.AX.4.Tier.Databases.Group']/Instance$", instance)
		call dbGroup.AddProperty("$MPElement[Name='Progel.AX.4.Tier.Databases.Group']/Database$", database)
		call dbGroup.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "AX4 - Data for " & database & " (" & dbServer & ")")	
		call oDiscoveryData.AddInstance(dbGroup)
        Set oRel = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='Progel.AX.4.DServiceContainsTDBGroup']$")
        oRel.Source = dApp
        oRel.Target = dbGroup
        Call oDiscoveryData.AddInstance(oRel)

        'Lastly set the Services Group references Database group relationship
        Set oRel = oDiscoveryData.CreateRelationshipInstance("$MPElement[Name='Progel.AX.4.ServiceReferencesData']$")
        oRel.Source = groupInst
        oRel.Target = dbGroup
        Call oDiscoveryData.AddInstance(oRel)

end function

'**********************************************
'**** HELPER FUNCTIONS SCOM sempre necessarie
'**********************************************

Sub Globals
	P_TraceLevel = TRACE_VERBOSE
    Set g_API = CreateObject("MOM.ScriptAPI")
    Set g_oXML = CreateObject("MSXML.DOMDocument")  
    Set g_StdErr = WScript.StdErr
	' only if needed g_RegistryStatePath = "HKLM\" & g_API.GetScriptStateKeyPath(WScript.ScriptName)
end Sub

Sub LogParams
	DIm scmdLine, I, oArgs
	sCmdLine = ""
	Set oArgs = WScript.Arguments
	for I=0 to oArgs.Count -1
	 sCmdLine = sCmdLine & " " & oArgs(I)
	next
	LogEvent START_EVENT_ID,EVENT_TYPE_INFORMATION,"Starting script. " & sCmdLine, TRACE_INFO
End Sub

Sub LogEvent(eventID, eventType, msg, level)
	If level <= P_TraceLevel Then
        If level = TRACE_ERROR Then
            g_StdErr.WriteLine "Logging event. " & WScript.ScriptName & " EventID: " & eventID & " eventType: " & eventType & " Version:" & SCRIPT_VERSION & " --> " & msg
        else
		    WScript.Echo "Logging event. " & WScript.ScriptName & " EventID: " & eventID & " eventType: " & eventType & " Version:" & SCRIPT_VERSION & " --> " & msg
        end if
		Call g_API.LogScriptEvent(WScript.ScriptName,eventID,eventType, msg & vbCrLf & "Version: " & SCRIPT_VERSION)
	end if
End Sub

Sub ClearGlobals
    Set g_API = Nothing
    Set g_oXML = Nothing
End Sub

Function GetXMLDate(dDate)
    Dim oNode
          
    Set oNode = g_oXML.CreateNode(1,"startTime","")
    oNode.DataType = "datetime.tz"
    oNode.nodeTypedValue =dDate
    GetXMLDate = oNode.Text
    Set oNode = Nothing
End Function
'strValueName = "HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\ActiveTimeBias"
'minTimeOffset = shell.regread(strValueName)
'toffset = datediff("h",DateAdd("n", minTimeOffset, now()),now())

Function FormatErr(oErr)
	FormatErr =  "0x" & Hex(oErr.Number) & "(" & oErr.Number & ") - " & oErr.Description
end function

Function ErrorMsg(oErr, Message)
    Dim temp
    temp = FormatErr(oErr)
    ErrorMsg = Message & " - " & temp
end Function

Function ThrowEmptyDiscovery(SourceId, ManagedEntityId)
Dim oDiscoveryData
	set oDiscoveryData = g_API.CreateDiscoveryData(0, SourceId, ManagedEntityId)
	LogEvent FAILURE_EVENT_ID, EVENT_TYPE_WARNING, "Exiting with empty discovery data", TRACE_INFO
	Call g_API.Return(oDiscoveryData)
End Function

Function ThrowKeepDiscoveryInfo(SourceId, ManagedEntityId)
Dim oDiscoveryData
	Set oDiscoveryData = g_API.CreateDiscoveryData(0,SourceId,ManagedEntityId)
	'Instead of Snapshot discovery, submit Incremental discovery data
	oDiscoveryData.IsSnapshot = false
	LogEvent FAILURE_EVENT_ID, EVENT_TYPE_WARNING, "Exiting with null non snapshot discovery data", TRACE_INFO
    Call g_API.Return (oDiscoveryData)
End Function

 Function GetTempFileName(sFile)
      Dim tfolder, tfile, fso
      Const TemporaryFolder = 2
      Set fso = CreateObject("Scripting.FileSystemObject")
      Set tfolder = fso.GetSpecialFolder(TemporaryFolder)
      If sFile = "" Then 
        sFile = fso.GetTempName    
      end if
      GetTempFileName = tfolder.Path & "\" & sFile
      Set fso = Nothing
End Function
]]>
          </ScriptBody>
          <TimeoutSeconds>$Config/ScriptTimeout$</TimeoutSeconds>
        </DataSource>
      </MemberModules>
      <Composition>
        <Node ID="DS" />
      </Composition>
    </Composite>
  </ModuleImplementation>
  <OutputType>System!System.Discovery.Data</OutputType>
</DataSourceModuleType>